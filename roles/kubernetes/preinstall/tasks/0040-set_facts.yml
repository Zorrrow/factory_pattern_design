---
- name: Force binaries directory for Flatcar Container Linux by Kinvolk
  set_fact:
    bin_dir: "/opt/bin"
  when: ansible_os_family in ["Flatcar", "Flatcar Container Linux by Kinvolk"]
  tags:
    - facts

- name: Set os_family fact for Kylin Linux Advanced Server and openEuler
  set_fact:
    ansible_os_family: "RedHat"
    ansible_distribution_major_version: "8"
  when: ansible_distribution in ["Kylin Linux Advanced Server", "openEuler"]
  tags:
    - facts

- name: check if booted with ostree
  stat:
    path: /run/ostree-booted
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: ostree

- name: set is_fedora_coreos
  lineinfile:
    path: /etc/os-release
    line: "VARIANT_ID=coreos"
    state: present
  check_mode: yes
  register: os_variant_coreos
  changed_when: false

- name: set is_fedora_coreos
  set_fact:
    is_fedora_coreos: "{{ ostree.stat.exists and os_variant_coreos is not changed }}"

- name: check resolvconf
  command: which resolvconf
  register: resolvconf
  failed_when: false
  changed_when: false
  check_mode: no

- name: check existence of /etc/resolvconf/resolv.conf.d
  stat:
    path: /etc/resolvconf/resolv.conf.d
    get_attributes: no
    get_checksum: no
    get_mime: no
  failed_when: false
  register: resolvconfd_path

- name: check status of /etc/resolv.conf
  stat:
    path: /etc/resolv.conf
    follow: no
    get_attributes: no
    get_checksum: no
    get_mime: no
  failed_when: false
  register: resolvconf_stat

- block:

    - name: get content of /etc/resolv.conf
      slurp:
        src: /etc/resolv.conf
      register: resolvconf_slurp

    - name: get currently configured nameservers
      set_fact:
        configured_nameservers: "{{ resolvconf_slurp.content | b64decode | regex_findall('^nameserver\\s*(.*)', multiline=True) | ipaddr }}"
      when: resolvconf_slurp.content is defined

  when: resolvconf_stat.stat.exists is defined and resolvconf_stat.stat.exists

- name: Stop if /etc/resolv.conf not configured nameservers
  assert:
    that: configured_nameservers|length>0
    fail_msg: "nameserver should not empty in /etc/resolv.conf"
  when:
    - not ignore_assert_errors
    - configured_nameservers is defined
    - not (upstream_dns_servers is defined and upstream_dns_servers|length > 0)
    - not (disable_host_nameservers | default(false))

- name: NetworkManager | Check if host has NetworkManager
  # noqa 303 Should we use service_facts for this?
  command: systemctl is-active --quiet NetworkManager.service
  register: networkmanager_enabled
  failed_when: false
  changed_when: false
  check_mode: false

- name: check systemd-resolved
  # noqa 303 Should we use service_facts for this?
  command: systemctl is-active systemd-resolved
  register: systemd_resolved_enabled
  failed_when: false
  changed_when: false
  check_mode: no

- name: set default dns if remove_default_searchdomains is false
  set_fact:
    default_searchdomains: ["default.svc.{{ dns_domain }}", "svc.{{ dns_domain }}"]
  when: not remove_default_searchdomains|default()|bool or (remove_default_searchdomains|default()|bool and searchdomains|default([])|length==0)

- name: set dns facts
  set_fact:
    resolvconf: >-
      {%- if resolvconf.rc == 0 and resolvconfd_path.stat.isdir is defined and resolvconfd_path.stat.isdir -%}true{%- else -%}false{%- endif -%}
    bogus_domains: |-
      {% for d in default_searchdomains|default([]) + searchdomains|default([]) -%}
      {{ dns_domain }}.{{ d }}./{{ d }}.{{ d }}./com.{{ d }}./
      {%- endfor %}
    cloud_resolver: "{{ ['169.254.169.254'] if cloud_provider is defined and cloud_provider == 'gce' else
                        ['169.254.169.253'] if cloud_provider is defined and cloud_provider == 'aws' else
                        [] }}"

- name: check if kubelet is configured
  stat:
    path: "{{ kube_config_dir }}/kubelet.env"
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: kubelet_configured
  changed_when: false

- name: check if early DNS configuration stage
  set_fact:
    dns_early: "{{ not kubelet_configured.stat.exists }}"

- name: target resolv.conf files
  set_fact:
    resolvconffile: /etc/resolv.conf
    base: >-
      {%- if resolvconf|bool -%}/etc/resolvconf/resolv.conf.d/base{%- endif -%}
    head: >-
      {%- if resolvconf|bool -%}/etc/resolvconf/resolv.conf.d/head{%- endif -%}
  when: not ansible_os_fam