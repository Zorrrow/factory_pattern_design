apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
{% if kubeadm_token is defined %}
bootstrapTokens:
- token: "{{ kubeadm_token }}"
  description: "kubespray kubeadm bootstrap token"
  ttl: "24h"
{% endif %}
localAPIEndpoint:
  advertiseAddress: {{ ip | default(fallback_ips[inventory_hostname]) }}
  bindPort: {{ kube_apiserver_port }}
{% if kubeadm_certificate_key is defined %}
certificateKey: {{ kubeadm_certificate_key }}
{% endif %}
nodeRegistration:
{% if kube_override_hostname|default('') %}
  name: {{ kube_override_hostname }}
{% endif %}
{% if inventory_hostname in groups['kube_control_plane'] and inventory_hostname not in groups['kube_node'] %}
  taints:
  - effect: NoSchedule
    key: node-role.kubernetes.io/master
  - effect: NoSchedule
    key: node-role.kubernetes.io/control-plane
{% else %}
  taints: []
{% endif %}
  criSocket: {{ cri_socket }}
{% if cloud_provider is defined and cloud_provider in ["external"] %}
  kubeletExtraArgs:
    cloud-provider: external
{% endif %}
{% if kubeadm_patches is defined and kubeadm_patches.enabled %}
patches:
  directory: {{ kubeadm_patches.dest_dir }}
{% endif %}
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
clusterName: {{ cluster_name }}
etcd:
{% if etcd_deployment_type != "kubeadm" %}
  external:
      endpoints:
{% for endpoint in etcd_access_addresses.split(',') %}
      - {{ endpoint }}
{% endfor %}
      caFile: {{ etcd_cert_dir }}/{{ kube_etcd_cacert_file }}
      certFile: {{ etcd_cert_dir }}/{{ kube_etcd_cert_file }}
      keyFile: {{ etcd_cert_dir }}/{{ kube_etcd_key_file }}
{% elif etcd_deployment_type == "kubeadm" %}
  local:
    imageRepository: "{{ etcd_image_repo | regex_replace("/etcd$","") }}"
    imageTag: "{{ etcd_image_tag }}"
    dataDir: "{{ etcd_data_dir }}"
    extraArgs:
      metrics: {{ etcd_metrics }}
      election-timeout: "{{ etcd_election_timeout }}"
      heartbeat-interval: "{{ etcd_heartbeat_interval }}"
      auto-compaction-retention: "{{ etcd_compaction_retention }}"
{% if etcd_snapshot_count is defined %}
      snapshot-count: "{{ etcd_snapshot_count }}"
{% endif %}
{% if etcd_quota_backend_bytes is defined %}
      quota-backend-bytes: "{{ etcd_quota_backend_bytes }}"
{% endif %}
{% if etcd_max_request_bytes is defined %}
      max-request-bytes: "{{ etcd_max_request_bytes }}"
{% endif %}
{% if etcd_log_level is defined %}
      log-level: "{{ etcd_log_level }}"
{% endif %}
{% for key, value in etcd_extra_vars.items() %}
      {{ key }}: "{{ value }}"
{% endfor %}
    serverCertSANs:
{% for san in etcd_cert_alt_names %}
      - {{ san }}
{% endfor %}
{% for san in etcd_cert_alt_ips %}
      - {{ san }}
{% endfor %}
    peerCertSANs:
{% for san in etcd_cert_alt_names %}
      - {{ san }}
{% endfor %}
{% for san in etcd_cert_alt_ips %}
      - {{ san }}
{% endfor %}
{% endif %}
dns:
  imageRepository: {{ coredns_image_repo | regex_replace('/coredns(?!/coredns).*$','') }}
  imageTag: {{ coredns_image_tag }}
networking:
  dnsDomain: {{ dns_domain }}
  serviceSubnet: "{{ kube_service_addresses }}{{ ',' + kube_service_addresses_ipv6 if enable_dual_stack_networks else '' }}"
{% if kube_network_plugin is defined and kube_network_plugin not in ["kube-ovn"] %}
  podSubnet: "{{ kube_pods_subnet }}{{ ',' + kube_pods_subnet_ipv6 if enable_dual_stack_networks else '' }}"
{% endif %}
{% if kubeadm_feature_gates %}
featureGates:
{%   for feature in kubeadm_feature_gates %}
  {{ feature|replace("=", ": ") }}
{%   endfor %}
{% endif %}
kubernetesVersion: {{ kube_version }}
{% if kubeadm_config_api_fqdn is defined %}
controlPlaneEndpoint: {{ kubeadm_config_api_fqdn }}:{{ loadbalancer_apiserver.port | default(kube_apiserver_port) }}
{% else %}
controlPlaneEndpoint: {{ ip | default(fallback_ips[inventory_hostname]) }}:{{ kube_apiserver_port }}
{% endif %}
certificatesDir: {{ kube_cert_dir }}
imageRepository: {{ kube_image_repo }}
apiServer:
  extraArgs:
{% if kube_apiserver_pod_eviction_not_ready_timeout_seconds is defined %}
    default-not-ready-toleration-seconds: "{{ kube_apiserver_pod_eviction_not_ready_timeout_seconds }}"
{% endif %}
{% if kube_apiserver_pod_eviction_unreachable_timeout_seconds is defined %}
    default-unreachable-toleration-seconds: "{{ kube_apiserver_pod_eviction_unreachable_timeout_seconds }}"
{% endif %}
{% if kube_api_anonymous_auth is defined %}
    anonymous-auth: "{{ kube_api_anonymous_auth }}"
{% endif %}
    authorization-mode: {{ authorization_modes | join(',') }}
    bind-address: {{ kube_apiserver_bind_address }}
{% if kube_apiserver_enable_admission_plugins|length > 0 %}
    enable-admission-plugins: {{ kube_apiserver_enable_admission_plugins | join(',') }}
{% endif %}
{% if kube_apiserver_admission_control_config_file %}
    admission-control-config-file: {{ kube_config_dir }}/admission-controls.yaml
{% endif %}
{% if kube_apiserver_disable_admission_plugins|length > 0 %}
    disable-admission-plugins: {{ kube_apiserver_disable_admission_plugins | join(',') }}
{% endif %}
    apiserver-count: "{{ kube_apiserver_count }}"
    endpoint-reconciler-type: lease
{% if etcd_events_cluster_enabled %}
    etcd-servers-overrides: "/events#{{ etcd_events_access_addresses_semicolon }}"
{% endif %}
    service-node-port-range: {{ kube_apiserver_node_port_range }}
    service-cluster-ip-range: "{{ kube_service_addresses }}{{ ',' + kube_service_addresses_ipv6 if enable_dual_stack_networks else '' }}"
    kubelet-preferred-address-types: "{{ kubelet_preferred_address_types }}"
    profiling: "{{ kube_profiling }}"
    request-timeout: "{{ kube_apiserver_request_timeout }}"
    enable-aggregator-routing: "{{ kube_api_aggregator_routing }}"
{% if kube_token_auth|default(true) %}
    token-auth-file: {{ kube_token_dir }}/known_tokens.csv
{% endif %}
{% if kube_apiserver_service_account_lookup %}
    service-account-lookup: "{{ kube_apiserver_service_account_lookup }}"
{% endif %}
{% if kube_oidc_auth|default(false) and kube_oidc_url is defined and kube_oidc_client_id is defined %}
    oidc-issuer-url: "{{ kube_oidc_url }}"
    oidc-client-id: "{{ kube_oidc_client_id }}"
{%   if kube_oidc_ca_file is defined %}
    oidc-ca-file: "{{ kube_oidc_ca_file }}"
{%   endif %}
{%   if kube_oidc_username_claim is defined %}
    oidc-username-claim: "{{ kube_oidc_username_claim }}"
{%   endif %}
{%   if kube_oidc_groups_claim is defined %}
    oidc-groups-claim: "{{ kube_oidc_groups_claim }}"
{%   endif %}
{%   if kube_oidc_username_prefix is defined %}
    oidc-username-prefix: "{{ kube_oidc_username_prefix }}"
{%   endif %}
{%   if kube_oidc_groups_prefix is defined %}
    oidc-groups-prefix: "{{ kube_oidc_groups_prefix }}"
{%   endif %}
{% endif %}
{% if kube_webhook_token_auth|default(false) %}
    authentication-token-webhook-config-file: {{ kube_config_dir }}/webhook-token-auth-config.yaml
{% endif %}
{% if kube_webhook_authorization|default(false) %}
    authorization-webhook-config-file: {{ kube_config_dir }}/webhook-authorization-config.yaml
{% endif %}
{% if kube_encrypt_secret_data %}
    encryption-provider-config: {{ kube_cert_dir }}/secrets_encryption.yaml
{% endif %}
    storage-backend: {{ kube_apise