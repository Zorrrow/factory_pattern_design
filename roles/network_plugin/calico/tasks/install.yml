---
- name: Calico | Install Wireguard packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ calico_wireguard_packages }}"
  register: calico_package_install
  until: calico_package_install is succeeded
  retries: 4
  when: calico_wireguard_enabled

- name: Calico | Copy calicoctl binary from download dir
  copy:
    src: "{{ local_release_dir }}/calicoctl"
    dest: "{{ bin_dir }}/calicoctl"
    mode: 0755
    remote_src: yes

- name: Calico | Write Calico cni config
  template:
    src: "cni-calico.conflist.j2"
    dest: "/etc/cni/net.d/calico.conflist.template"
    mode: 0644
    owner: root
  register: calico_conflist
  notify: reset_calico_cni

- name: Calico | Create calico certs directory
  file:
    dest: "{{ calico_cert_dir }}"
    state: directory
    mode: 0750
    owner: root
    group: root
  when: calico_datastore == "etcd"

- name: Calico | Link etcd certificates for calico-node
  file:
    src: "{{ etcd_cert_dir }}/{{ item.s }}"
    dest: "{{ calico_cert_dir }}/{{ item.d }}"
    state: hard
    mode: 0640
    force: yes
  with_items:
    - {s: "{{ kube_etcd_cacert_file }}", d: "ca_cert.crt"}
    - {s: "{{ kube_etcd_cert_file }}", d: "cert.crt"}
    - {s: "{{ kube_etcd_key_file }}", d: "key.pem"}
  when: calico_datastore == "etcd"

- name: Calico | Generate typha certs
  include_tasks: typha_certs.yml
  when:
    - typha_secure
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Calico | Generate apiserver certs
  include_tasks: calico_apiserver_certs.yml
  when:
    - calico_apiserver_enabled
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Calico | Install calicoctl wrapper script
  template:
    src: "calicoctl.{{ calico_datastore }}.sh.j2"
    dest: "{{ bin_dir }}/calicoctl.sh"
    mode: 0755
    owner: root
    group: root

- name: Calico | wait for etcd
  uri:
    url: "{{ etcd_access_addresses.split(',') | first }}/health"
    validate_certs: no
    client_cert: "{{ calico_cert_dir }}/cert.crt"
    client_key: "{{ calico_cert_dir }}/key.pem"
  register: result
  until: result.status == 200 or result.status == 401
  retries: 10
  delay: 5
  run_once: true
  when: calico_datastore == "etcd"

- name: Calico | Check if calico network pool has already been configured
  # noqa 306 - grep will exit 1 if no match found
  shell: >
    {{ bin_dir }}/calicoctl.sh get ippool | grep -w "{{ calico_pool_cidr | default(kube_pods_subnet) }}" | wc -l
  args:
    executable: /bin/bash
  register: calico_conf
  retries: 4
  until: calico_conf.rc == 0
  delay: "{{ retry_stagger | random + 3 }}"
  changed_when: false
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Calico | Ensure that calico_pool_cidr is within kube_pods_subnet when defined
  assert:
    that: "[calico_pool_cidr] | ipaddr(kube_pods_subnet) | length == 1"
    msg: "{{ calico_pool_cidr }} is not within or equal to {{ kube_pods_subnet }}"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
    - 'calico_conf.stdout == "0"'
    - calico_pool_cidr is defined

- name: Calico | Check if calico IPv6 network pool has already been configured
  # noqa 306 - grep will exit 1 if no match found
  shell: >
    {{ bin_dir }}/calicoctl.sh get ippool | grep -w "{{ calico_pool_cidr_ipv6 | default(kube_pods_subnet_ipv6) }}" | wc -l
  args:
    executable: /bin/bash
  register: calico_conf_ipv6
  retries: 4
  until: calico_conf_ipv6.rc == 0
  delay: "{{ retry_stagger | random + 3 }}"
  changed_when: false
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
    - enable_dual_stack_networks

- name: Calico | Ensure that calico_pool_cidr_ipv6 is within kube_pods_subnet_ipv6 when defined
  assert:
    that: "[calico_pool_cidr_ipv6] | ipaddr(kube_pods_subnet_ipv6) | length == 1"
    msg: "{{ calico_pool_cidr_ipv6 }} is not within or equal to {{ kube_pods_subnet_ipv6 }}"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]
    - calico_conf_ipv6.stdout is defined and calico_conf_ipv6.stdout == "0"
    - calico_pool_cidr_ipv6 is defined
    - enable_dual_stack_networks

- block:
    - name: Calico | Check if extra directory is needed
      stat:
        path: "{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds/{{ 'kdd' if (calico_version is version('v3.22.3','<')) else 'crd' }}"
      register: kdd_path
    - name: Calico | Set kdd path when calico < v3.22.3
      set_fact:
        calico_kdd_path: "{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds{{ '/kdd' if kdd_path.stat.exists is defined and kdd_path.stat.exists }}"
      when:
        - calico_version is version('v3.22.3', '<')
    - name: Calico | Set kdd path when calico > v3.22.2
      set_fact:
        calico_kdd_path: "{{ local_release_dir }}/calico-{{ calico_version }}-kdd-crds{{ '/crd' if kdd_path.stat.exists is defined and kdd_path.stat.exists }}"
      when:
        - calico_version is version('v3.22.2', '>')
    - name: Calico | Create calico manifests for kdd
      assemble:
        src: "{{ calico_kdd_path }}"
        dest: "{{ kube_config_dir }}/kdd-crds.yml"
        mode: 0644
        delimiter: "---\n"
        regexp: ".*\\.yaml"
        remote_src: true

    - name: Calico | Create Calico Kubernetes datastore resources
      kube:
        kubectl: "{{ bin_dir }}/kubectl"
        filename: "{{ kube_config_dir }}/kdd-crds.yml"
        state: "latest"
      when:
        - inventory_hostname == groups['kube_control_plane'][0]
  when:
    - inventory_hostname in groups['kube_control_plane']
    - calico_datastore == "kdd"

- block:
    - name: Calico | Get existing FelixConfiguration
      command: "{{ bin_dir }}/calicoctl.sh get felixconfig default -o json"
      register: _felix_cmd
      ignore_errors: True
      changed_when: False

    - name: Calico | Set kubespray FelixConfiguration
      set_fact:
        _felix_config: >
          {
            "kind": "FelixConfiguration",
            "apiVersion": "projectcalico.org/v3",
            "metadata": {
              "name": "default",
            },
            "spec": {
              "ipipEnabled": {{ calico_ipip_mode != 'Never' }},
              "reportingInterval": "{{ calico_felix_reporting_interval }}",
              "bpfLogLevel": "{{ calico_bpf_log_level }}",
              "bpfEnabled": {{ calico_bpf_enabled | bool }},
              "bpfExternalServiceMode": "{{ calico_bpf_service_mode }}",
              "wireguardEnabled": {{ calico_wireguard_enabled | bool }},
              "logSeverityScreen": "{{ calico_felix_log_severity_screen }}",
              "vxlanEnabled": {{ calico_vxlan_mode != 'Never' }},
              "featureDetectOverride": "{{ calico_feature_detect_override }}",
              "floatingIPs": "{{ calico_felix_floating_ips }}"
            }
          }

    - name: Calico | Process FelixConfiguration
      set_fact:
        _felix_config: "{{ _felix_cmd.stdout | from_json | combine(_felix_config, recursive=True) }}"
      when:
        - _felix_cmd is success

    - name: Calico | Configure calico FelixConfiguration
      command:
        cmd: "{{ bin_dir }}/calicoctl.sh apply -f -"
        stdin: "{{ _felix_config is string | ternary(_felix_config, _felix_config|to_json) }}"
      changed_when: False
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- block:
    - name: Calico | Get existing calico network pool
      command: "{{ bin_dir }}/calicoctl.sh get ippool {{ calico_pool_name }} -o json"
      register: _calico_pool_cmd
      ignore_errors: True
      changed_when: False

    - name: Calico | Set kubespray calico network pool
      set_fact:
        _calico_pool: >
          {
            "kind": "IPPool",
            "apiVersion": "projectcalico.org/v3",
            "metadata": {
              "name": "{{ calico_pool_name }}",
            },
            "spec": {
              "blockSize": {{ calico_pool_blocksize | default(kube_network_node_prefix) }},
              "cidr": "{{ calico_pool_cidr | default(kube_pods_subnet) }}",
              "ipipMode": "{{ calico_ipip_mode }}",
              "vxlanMode": "{{ calico_vxlan_mode }}",
              "natOutgoing": {{ nat_outgoing|default(false) }}
            }
          }

    - name: Calico | Process calico network pool
      set_fact:
        _calico_pool: "{{ _calico_pool_cmd.stdout | from_json | combine(_calico_pool, recursive=True) }}"
      when:
        - _calico_pool_cmd is success

    - name: Calico | Configure calico network pool
      command:
        cmd: "{{ bin_dir }}/calicoctl.sh apply -f -"
        stdin: "{{ _calico_pool is string | ternary(_calico_pool, _calico_pool|to_json) }}"
      changed_when: False
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- block: